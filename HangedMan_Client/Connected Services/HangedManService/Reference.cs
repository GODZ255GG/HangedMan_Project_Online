//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HangedMan_Client.HangedManService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Logic.POCO")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsEarnedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((object.ReferenceEquals(this.BirthDateField, value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerID {
            get {
                return this.PlayerIDField;
            }
            set {
                if ((this.PlayerIDField.Equals(value) != true)) {
                    this.PlayerIDField = value;
                    this.RaisePropertyChanged("PlayerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointsEarned {
            get {
                return this.PointsEarnedField;
            }
            set {
                if ((this.PointsEarnedField.Equals(value) != true)) {
                    this.PointsEarnedField = value;
                    this.RaisePropertyChanged("PointsEarned");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/Logic.POCO")]
    [System.SerializableAttribute()]
    public partial class Match : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChallengerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailChallengerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> GuestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameChallengerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RemainingAttemptsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<char> SelectedLetterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusMatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WinnerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WordIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChallengerID {
            get {
                return this.ChallengerIDField;
            }
            set {
                if ((this.ChallengerIDField.Equals(value) != true)) {
                    this.ChallengerIDField = value;
                    this.RaisePropertyChanged("ChallengerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateMatch {
            get {
                return this.DateMatchField;
            }
            set {
                if ((object.ReferenceEquals(this.DateMatchField, value) != true)) {
                    this.DateMatchField = value;
                    this.RaisePropertyChanged("DateMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailChallenger {
            get {
                return this.EmailChallengerField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailChallengerField, value) != true)) {
                    this.EmailChallengerField = value;
                    this.RaisePropertyChanged("EmailChallenger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> GuestID {
            get {
                return this.GuestIDField;
            }
            set {
                if ((this.GuestIDField.Equals(value) != true)) {
                    this.GuestIDField = value;
                    this.RaisePropertyChanged("GuestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchID {
            get {
                return this.MatchIDField;
            }
            set {
                if ((this.MatchIDField.Equals(value) != true)) {
                    this.MatchIDField = value;
                    this.RaisePropertyChanged("MatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchLanguage {
            get {
                return this.MatchLanguageField;
            }
            set {
                if ((this.MatchLanguageField.Equals(value) != true)) {
                    this.MatchLanguageField = value;
                    this.RaisePropertyChanged("MatchLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickNameChallenger {
            get {
                return this.NickNameChallengerField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameChallengerField, value) != true)) {
                    this.NickNameChallengerField = value;
                    this.RaisePropertyChanged("NickNameChallenger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemainingAttempts {
            get {
                return this.RemainingAttemptsField;
            }
            set {
                if ((this.RemainingAttemptsField.Equals(value) != true)) {
                    this.RemainingAttemptsField = value;
                    this.RaisePropertyChanged("RemainingAttempts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<char> SelectedLetter {
            get {
                return this.SelectedLetterField;
            }
            set {
                if ((this.SelectedLetterField.Equals(value) != true)) {
                    this.SelectedLetterField = value;
                    this.RaisePropertyChanged("SelectedLetter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusMatchID {
            get {
                return this.StatusMatchIDField;
            }
            set {
                if ((this.StatusMatchIDField.Equals(value) != true)) {
                    this.StatusMatchIDField = value;
                    this.RaisePropertyChanged("StatusMatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WinnerID {
            get {
                return this.WinnerIDField;
            }
            set {
                if ((this.WinnerIDField.Equals(value) != true)) {
                    this.WinnerIDField = value;
                    this.RaisePropertyChanged("WinnerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WordID {
            get {
                return this.WordIDField;
            }
            set {
                if ((this.WordIDField.Equals(value) != true)) {
                    this.WordIDField = value;
                    this.RaisePropertyChanged("WordID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Logic.POCO")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnglishCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpanishCategoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCategory {
            get {
                return this.EnglishCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCategoryField, value) != true)) {
                    this.EnglishCategoryField = value;
                    this.RaisePropertyChanged("EnglishCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpanishCategory {
            get {
                return this.SpanishCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SpanishCategoryField, value) != true)) {
                    this.SpanishCategoryField = value;
                    this.RaisePropertyChanged("SpanishCategory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Word", Namespace="http://schemas.datacontract.org/2004/07/Logic.POCO")]
    [System.SerializableAttribute()]
    public partial class Word : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnglishClueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnglishWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpanishClueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpanishWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WordIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishClue {
            get {
                return this.EnglishClueField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishClueField, value) != true)) {
                    this.EnglishClueField = value;
                    this.RaisePropertyChanged("EnglishClue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishWord {
            get {
                return this.EnglishWordField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishWordField, value) != true)) {
                    this.EnglishWordField = value;
                    this.RaisePropertyChanged("EnglishWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpanishClue {
            get {
                return this.SpanishClueField;
            }
            set {
                if ((object.ReferenceEquals(this.SpanishClueField, value) != true)) {
                    this.SpanishClueField = value;
                    this.RaisePropertyChanged("SpanishClue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpanishWord {
            get {
                return this.SpanishWordField;
            }
            set {
                if ((object.ReferenceEquals(this.SpanishWordField, value) != true)) {
                    this.SpanishWordField = value;
                    this.RaisePropertyChanged("SpanishWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WordID {
            get {
                return this.WordIDField;
            }
            set {
                if ((this.WordIDField.Equals(value) != true)) {
                    this.WordIDField = value;
                    this.RaisePropertyChanged("WordID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HangedManService.IPlayerServices")]
    public interface IPlayerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        bool RegisterPlayer(HangedMan_Client.HangedManService.Player newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerServices/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangedMan_Client.HangedManService.Player newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/EmailAlreadyRegistered", ReplyAction="http://tempuri.org/IPlayerServices/EmailAlreadyRegisteredResponse")]
        bool EmailAlreadyRegistered(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/EmailAlreadyRegistered", ReplyAction="http://tempuri.org/IPlayerServices/EmailAlreadyRegisteredResponse")]
        System.Threading.Tasks.Task<bool> EmailAlreadyRegisteredAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/NicknameAlreadyRegistered", ReplyAction="http://tempuri.org/IPlayerServices/NicknameAlreadyRegisteredResponse")]
        bool NicknameAlreadyRegistered(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/NicknameAlreadyRegistered", ReplyAction="http://tempuri.org/IPlayerServices/NicknameAlreadyRegisteredResponse")]
        System.Threading.Tasks.Task<bool> NicknameAlreadyRegisteredAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/TelephoneAlreadyExist", ReplyAction="http://tempuri.org/IPlayerServices/TelephoneAlreadyExistResponse")]
        bool TelephoneAlreadyExist(string telephone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/TelephoneAlreadyExist", ReplyAction="http://tempuri.org/IPlayerServices/TelephoneAlreadyExistResponse")]
        System.Threading.Tasks.Task<bool> TelephoneAlreadyExistAsync(string telephone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/LogIn", ReplyAction="http://tempuri.org/IPlayerServices/LogInResponse")]
        HangedMan_Client.HangedManService.Player LogIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/LogIn", ReplyAction="http://tempuri.org/IPlayerServices/LogInResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Player> LogInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerServices/UpdatePlayerProfileResponse")]
        bool UpdatePlayerProfile(HangedMan_Client.HangedManService.Player updatePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerServices/UpdatePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangedMan_Client.HangedManService.Player updatePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetPoints", ReplyAction="http://tempuri.org/IPlayerServices/GetPointsResponse")]
        int GetPoints(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerServices/GetPoints", ReplyAction="http://tempuri.org/IPlayerServices/GetPointsResponse")]
        System.Threading.Tasks.Task<int> GetPointsAsync(int playerID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServicesChannel : HangedMan_Client.HangedManService.IPlayerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServicesClient : System.ServiceModel.ClientBase<HangedMan_Client.HangedManService.IPlayerServices>, HangedMan_Client.HangedManService.IPlayerServices {
        
        public PlayerServicesClient() {
        }
        
        public PlayerServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterPlayer(HangedMan_Client.HangedManService.Player newPlayer) {
            return base.Channel.RegisterPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangedMan_Client.HangedManService.Player newPlayer) {
            return base.Channel.RegisterPlayerAsync(newPlayer);
        }
        
        public bool EmailAlreadyRegistered(string email) {
            return base.Channel.EmailAlreadyRegistered(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailAlreadyRegisteredAsync(string email) {
            return base.Channel.EmailAlreadyRegisteredAsync(email);
        }
        
        public bool NicknameAlreadyRegistered(string nickname) {
            return base.Channel.NicknameAlreadyRegistered(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> NicknameAlreadyRegisteredAsync(string nickname) {
            return base.Channel.NicknameAlreadyRegisteredAsync(nickname);
        }
        
        public bool TelephoneAlreadyExist(string telephone) {
            return base.Channel.TelephoneAlreadyExist(telephone);
        }
        
        public System.Threading.Tasks.Task<bool> TelephoneAlreadyExistAsync(string telephone) {
            return base.Channel.TelephoneAlreadyExistAsync(telephone);
        }
        
        public HangedMan_Client.HangedManService.Player LogIn(string email, string password) {
            return base.Channel.LogIn(email, password);
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Player> LogInAsync(string email, string password) {
            return base.Channel.LogInAsync(email, password);
        }
        
        public bool UpdatePlayerProfile(HangedMan_Client.HangedManService.Player updatePlayer) {
            return base.Channel.UpdatePlayerProfile(updatePlayer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangedMan_Client.HangedManService.Player updatePlayer) {
            return base.Channel.UpdatePlayerProfileAsync(updatePlayer);
        }
        
        public int GetPoints(int playerID) {
            return base.Channel.GetPoints(playerID);
        }
        
        public System.Threading.Tasks.Task<int> GetPointsAsync(int playerID) {
            return base.Channel.GetPointsAsync(playerID);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HangedManService.IGameServices")]
    public interface IGameServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/CreateMatch", ReplyAction="http://tempuri.org/IGameServices/CreateMatchResponse")]
        HangedMan_Client.HangedManService.Match CreateMatch([System.ServiceModel.MessageParameterAttribute(Name="createMatch")] HangedMan_Client.HangedManService.Match createMatch1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/CreateMatch", ReplyAction="http://tempuri.org/IGameServices/CreateMatchResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match> CreateMatchAsync(HangedMan_Client.HangedManService.Match createMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchList", ReplyAction="http://tempuri.org/IGameServices/GetMatchListResponse")]
        HangedMan_Client.HangedManService.Match[] GetMatchList(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchList", ReplyAction="http://tempuri.org/IGameServices/GetMatchListResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match[]> GetMatchListAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchesPlayed", ReplyAction="http://tempuri.org/IGameServices/GetMatchesPlayedResponse")]
        HangedMan_Client.HangedManService.Match[] GetMatchesPlayed(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchesPlayed", ReplyAction="http://tempuri.org/IGameServices/GetMatchesPlayedResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match[]> GetMatchesPlayedAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/InitMatch", ReplyAction="http://tempuri.org/IGameServices/InitMatchResponse")]
        bool InitMatch(int guestID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/InitMatch", ReplyAction="http://tempuri.org/IGameServices/InitMatchResponse")]
        System.Threading.Tasks.Task<bool> InitMatchAsync(int guestID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetGuestNickName", ReplyAction="http://tempuri.org/IGameServices/GetGuestNickNameResponse")]
        string GetGuestNickName(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetGuestNickName", ReplyAction="http://tempuri.org/IGameServices/GetGuestNickNameResponse")]
        System.Threading.Tasks.Task<string> GetGuestNickNameAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/IsThereGuest", ReplyAction="http://tempuri.org/IGameServices/IsThereGuestResponse")]
        bool IsThereGuest(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/IsThereGuest", ReplyAction="http://tempuri.org/IGameServices/IsThereGuestResponse")]
        System.Threading.Tasks.Task<bool> IsThereGuestAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/LeaveMatch", ReplyAction="http://tempuri.org/IGameServices/LeaveMatchResponse")]
        bool LeaveMatch(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/LeaveMatch", ReplyAction="http://tempuri.org/IGameServices/LeaveMatchResponse")]
        System.Threading.Tasks.Task<bool> LeaveMatchAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetGuestLetter", ReplyAction="http://tempuri.org/IGameServices/GetGuestLetterResponse")]
        System.Nullable<char> GetGuestLetter(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetGuestLetter", ReplyAction="http://tempuri.org/IGameServices/GetGuestLetterResponse")]
        System.Threading.Tasks.Task<System.Nullable<char>> GetGuestLetterAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/GetRemainingAttemptsResponse")]
        int GetRemainingAttempts(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/GetRemainingAttemptsResponse")]
        System.Threading.Tasks.Task<int> GetRemainingAttemptsAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdatePointsEarned", ReplyAction="http://tempuri.org/IGameServices/UpdatePointsEarnedResponse")]
        void UpdatePointsEarned(int matchID, int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdatePointsEarned", ReplyAction="http://tempuri.org/IGameServices/UpdatePointsEarnedResponse")]
        System.Threading.Tasks.Task UpdatePointsEarnedAsync(int matchID, int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/PenalizeAbandon", ReplyAction="http://tempuri.org/IGameServices/PenalizeAbandonResponse")]
        void PenalizeAbandon(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/PenalizeAbandon", ReplyAction="http://tempuri.org/IGameServices/PenalizeAbandonResponse")]
        System.Threading.Tasks.Task PenalizeAbandonAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/FinishMatch", ReplyAction="http://tempuri.org/IGameServices/FinishMatchResponse")]
        bool FinishMatch(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/FinishMatch", ReplyAction="http://tempuri.org/IGameServices/FinishMatchResponse")]
        System.Threading.Tasks.Task<bool> FinishMatchAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateCharBD", ReplyAction="http://tempuri.org/IGameServices/UpdateCharBDResponse")]
        bool UpdateCharBD(char letter, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateCharBD", ReplyAction="http://tempuri.org/IGameServices/UpdateCharBDResponse")]
        System.Threading.Tasks.Task<bool> UpdateCharBDAsync(char letter, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchStatus", ReplyAction="http://tempuri.org/IGameServices/GetMatchStatusResponse")]
        int GetMatchStatus(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetMatchStatus", ReplyAction="http://tempuri.org/IGameServices/GetMatchStatusResponse")]
        System.Threading.Tasks.Task<int> GetMatchStatusAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/UpdateRemainingAttemptsResponse")]
        bool UpdateRemainingAttempts(int remainingAttempts, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/UpdateRemainingAttemptsResponse")]
        System.Threading.Tasks.Task<bool> UpdateRemainingAttemptsAsync(int remainingAttempts, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateWinner", ReplyAction="http://tempuri.org/IGameServices/UpdateWinnerResponse")]
        bool UpdateWinner(int playerID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/UpdateWinner", ReplyAction="http://tempuri.org/IGameServices/UpdateWinnerResponse")]
        System.Threading.Tasks.Task<bool> UpdateWinnerAsync(int playerID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetWinnerID", ReplyAction="http://tempuri.org/IGameServices/GetWinnerIDResponse")]
        System.Nullable<int> GetWinnerID(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/GetWinnerID", ReplyAction="http://tempuri.org/IGameServices/GetWinnerIDResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> GetWinnerIDAsync(int matchID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesChannel : HangedMan_Client.HangedManService.IGameServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServicesClient : System.ServiceModel.ClientBase<HangedMan_Client.HangedManService.IGameServices>, HangedMan_Client.HangedManService.IGameServices {
        
        public GameServicesClient() {
        }
        
        public GameServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HangedMan_Client.HangedManService.Match CreateMatch(HangedMan_Client.HangedManService.Match createMatch1) {
            return base.Channel.CreateMatch(createMatch1);
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match> CreateMatchAsync(HangedMan_Client.HangedManService.Match createMatch) {
            return base.Channel.CreateMatchAsync(createMatch);
        }
        
        public HangedMan_Client.HangedManService.Match[] GetMatchList(int playerID) {
            return base.Channel.GetMatchList(playerID);
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match[]> GetMatchListAsync(int playerID) {
            return base.Channel.GetMatchListAsync(playerID);
        }
        
        public HangedMan_Client.HangedManService.Match[] GetMatchesPlayed(int playerID) {
            return base.Channel.GetMatchesPlayed(playerID);
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Match[]> GetMatchesPlayedAsync(int playerID) {
            return base.Channel.GetMatchesPlayedAsync(playerID);
        }
        
        public bool InitMatch(int guestID, int matchID) {
            return base.Channel.InitMatch(guestID, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> InitMatchAsync(int guestID, int matchID) {
            return base.Channel.InitMatchAsync(guestID, matchID);
        }
        
        public string GetGuestNickName(int playerID) {
            return base.Channel.GetGuestNickName(playerID);
        }
        
        public System.Threading.Tasks.Task<string> GetGuestNickNameAsync(int playerID) {
            return base.Channel.GetGuestNickNameAsync(playerID);
        }
        
        public bool IsThereGuest(int matchID) {
            return base.Channel.IsThereGuest(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> IsThereGuestAsync(int matchID) {
            return base.Channel.IsThereGuestAsync(matchID);
        }
        
        public bool LeaveMatch(int matchID) {
            return base.Channel.LeaveMatch(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> LeaveMatchAsync(int matchID) {
            return base.Channel.LeaveMatchAsync(matchID);
        }
        
        public System.Nullable<char> GetGuestLetter(int matchID) {
            return base.Channel.GetGuestLetter(matchID);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<char>> GetGuestLetterAsync(int matchID) {
            return base.Channel.GetGuestLetterAsync(matchID);
        }
        
        public int GetRemainingAttempts(int matchID) {
            return base.Channel.GetRemainingAttempts(matchID);
        }
        
        public System.Threading.Tasks.Task<int> GetRemainingAttemptsAsync(int matchID) {
            return base.Channel.GetRemainingAttemptsAsync(matchID);
        }
        
        public void UpdatePointsEarned(int matchID, int playerID) {
            base.Channel.UpdatePointsEarned(matchID, playerID);
        }
        
        public System.Threading.Tasks.Task UpdatePointsEarnedAsync(int matchID, int playerID) {
            return base.Channel.UpdatePointsEarnedAsync(matchID, playerID);
        }
        
        public void PenalizeAbandon(int playerID) {
            base.Channel.PenalizeAbandon(playerID);
        }
        
        public System.Threading.Tasks.Task PenalizeAbandonAsync(int playerID) {
            return base.Channel.PenalizeAbandonAsync(playerID);
        }
        
        public bool FinishMatch(int matchID) {
            return base.Channel.FinishMatch(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> FinishMatchAsync(int matchID) {
            return base.Channel.FinishMatchAsync(matchID);
        }
        
        public bool UpdateCharBD(char letter, int matchID) {
            return base.Channel.UpdateCharBD(letter, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCharBDAsync(char letter, int matchID) {
            return base.Channel.UpdateCharBDAsync(letter, matchID);
        }
        
        public int GetMatchStatus(int matchID) {
            return base.Channel.GetMatchStatus(matchID);
        }
        
        public System.Threading.Tasks.Task<int> GetMatchStatusAsync(int matchID) {
            return base.Channel.GetMatchStatusAsync(matchID);
        }
        
        public bool UpdateRemainingAttempts(int remainingAttempts, int matchID) {
            return base.Channel.UpdateRemainingAttempts(remainingAttempts, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRemainingAttemptsAsync(int remainingAttempts, int matchID) {
            return base.Channel.UpdateRemainingAttemptsAsync(remainingAttempts, matchID);
        }
        
        public bool UpdateWinner(int playerID, int matchID) {
            return base.Channel.UpdateWinner(playerID, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateWinnerAsync(int playerID, int matchID) {
            return base.Channel.UpdateWinnerAsync(playerID, matchID);
        }
        
        public System.Nullable<int> GetWinnerID(int matchID) {
            return base.Channel.GetWinnerID(matchID);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> GetWinnerIDAsync(int matchID) {
            return base.Channel.GetWinnerIDAsync(matchID);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HangedManService.IWordServices")]
    public interface IWordServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetCategories", ReplyAction="http://tempuri.org/IWordServices/GetCategoriesResponse")]
        HangedMan_Client.HangedManService.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetCategories", ReplyAction="http://tempuri.org/IWordServices/GetCategoriesResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordsPerCategory", ReplyAction="http://tempuri.org/IWordServices/GetWordsPerCategoryResponse")]
        HangedMan_Client.HangedManService.Word[] GetWordsPerCategory(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordsPerCategory", ReplyAction="http://tempuri.org/IWordServices/GetWordsPerCategoryResponse")]
        System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Word[]> GetWordsPerCategoryAsync(int category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordSpanish", ReplyAction="http://tempuri.org/IWordServices/GetWordSpanishResponse")]
        string GetWordSpanish(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordSpanish", ReplyAction="http://tempuri.org/IWordServices/GetWordSpanishResponse")]
        System.Threading.Tasks.Task<string> GetWordSpanishAsync(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordEnglish", ReplyAction="http://tempuri.org/IWordServices/GetWordEnglishResponse")]
        string GetWordEnglish(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetWordEnglish", ReplyAction="http://tempuri.org/IWordServices/GetWordEnglishResponse")]
        System.Threading.Tasks.Task<string> GetWordEnglishAsync(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetClueSpanish", ReplyAction="http://tempuri.org/IWordServices/GetClueSpanishResponse")]
        string GetClueSpanish(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetClueSpanish", ReplyAction="http://tempuri.org/IWordServices/GetClueSpanishResponse")]
        System.Threading.Tasks.Task<string> GetClueSpanishAsync(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetClueEnglish", ReplyAction="http://tempuri.org/IWordServices/GetClueEnglishResponse")]
        string GetClueEnglish(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetClueEnglish", ReplyAction="http://tempuri.org/IWordServices/GetClueEnglishResponse")]
        System.Threading.Tasks.Task<string> GetClueEnglishAsync(int wordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetCategoryByWordID", ReplyAction="http://tempuri.org/IWordServices/GetCategoryByWordIDResponse")]
        string GetCategoryByWordID(int wordID, int matchLanguage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordServices/GetCategoryByWordID", ReplyAction="http://tempuri.org/IWordServices/GetCategoryByWordIDResponse")]
        System.Threading.Tasks.Task<string> GetCategoryByWordIDAsync(int wordID, int matchLanguage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWordServicesChannel : HangedMan_Client.HangedManService.IWordServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WordServicesClient : System.ServiceModel.ClientBase<HangedMan_Client.HangedManService.IWordServices>, HangedMan_Client.HangedManService.IWordServices {
        
        public WordServicesClient() {
        }
        
        public WordServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WordServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HangedMan_Client.HangedManService.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public HangedMan_Client.HangedManService.Word[] GetWordsPerCategory(int category) {
            return base.Channel.GetWordsPerCategory(category);
        }
        
        public System.Threading.Tasks.Task<HangedMan_Client.HangedManService.Word[]> GetWordsPerCategoryAsync(int category) {
            return base.Channel.GetWordsPerCategoryAsync(category);
        }
        
        public string GetWordSpanish(int wordID) {
            return base.Channel.GetWordSpanish(wordID);
        }
        
        public System.Threading.Tasks.Task<string> GetWordSpanishAsync(int wordID) {
            return base.Channel.GetWordSpanishAsync(wordID);
        }
        
        public string GetWordEnglish(int wordID) {
            return base.Channel.GetWordEnglish(wordID);
        }
        
        public System.Threading.Tasks.Task<string> GetWordEnglishAsync(int wordID) {
            return base.Channel.GetWordEnglishAsync(wordID);
        }
        
        public string GetClueSpanish(int wordID) {
            return base.Channel.GetClueSpanish(wordID);
        }
        
        public System.Threading.Tasks.Task<string> GetClueSpanishAsync(int wordID) {
            return base.Channel.GetClueSpanishAsync(wordID);
        }
        
        public string GetClueEnglish(int wordID) {
            return base.Channel.GetClueEnglish(wordID);
        }
        
        public System.Threading.Tasks.Task<string> GetClueEnglishAsync(int wordID) {
            return base.Channel.GetClueEnglishAsync(wordID);
        }
        
        public string GetCategoryByWordID(int wordID, int matchLanguage) {
            return base.Channel.GetCategoryByWordID(wordID, matchLanguage);
        }
        
        public System.Threading.Tasks.Task<string> GetCategoryByWordIDAsync(int wordID, int matchLanguage) {
            return base.Channel.GetCategoryByWordIDAsync(wordID, matchLanguage);
        }
    }
}
